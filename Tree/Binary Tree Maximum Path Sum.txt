/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 struct SumInfo {
    int branchSum; //a branch is a path from root to a leaf
    int pathMaxSum; 
 };
 
class Solution {
public:
    int maxPathSum(TreeNode *root) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
       if(!root) 
            return 0;
       else 
       {
           SumInfo sumInfo = maxSum(root);
           
            return sumInfo.pathMaxSum;
       }
       
    }
    
    SumInfo maxSum(TreeNode *root){
        
        SumInfo thisSum;
        if(!root) 
         {   
            thisSum.branchSum = 0;
            thisSum.pathMaxSum = 0;
         }
        else 
        {
            SumInfo sumLeft, sumRight;

            sumLeft = maxSum(root->left);
            sumRight = maxSum(root->right);
            
            thisSum.branchSum = max(0, max(sumLeft.branchSum, sumRight.branchSum)) + root->val; 
            thisSum.pathMaxSum = max(0, sumLeft.branchSum) + max(0, sumRight.branchSum) + root->val;
            
            if( root->left && thisSum.pathMaxSum < sumLeft.pathMaxSum)
                thisSum.pathMaxSum = sumLeft.pathMaxSum;
                
            if( root->right &&  thisSum.pathMaxSum < sumRight.pathMaxSum)
                thisSum.pathMaxSum = sumRight.pathMaxSum;
        }
        
        return thisSum;
    }
    
};